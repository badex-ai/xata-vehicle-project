// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "vehicle_brands",
    columns: [
      { name: "name", type: "string" },
      { name: "model", type: "string", unique: true },
      {
        name: "vehicle_image",
        type: "file",
        file: { defaultPublicAccess: true },
      },
      { name: "vehicle_type", type: "string" },
    ],
    revLinks: [{ column: "vehicle_brands", table: "collisions" }],
  },
  {
    name: "states",
    columns: [
      { name: "name", type: "string" },
      { name: "abbreviation", type: "string" },
    ],
  },
  {
    name: "collisions",
    columns: [
      { name: "timestamp", type: "datetime" },
      { name: "state_name", type: "string" },
      { name: "state_abbr", type: "string" },
      { name: "location_of_collision", type: "string" },
      { name: "driver_sex", type: "string" },
      { name: "driver_experience", type: "int" },
      { name: "cause_of_collision", type: "string" },
      { name: "vehicle_plate_number", type: "string" },
      {
        name: "vehicle_brands",
        type: "link",
        link: { table: "vehicle_brands" },
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type VehicleBrands = InferredTypes["vehicle_brands"];
export type VehicleBrandsRecord = VehicleBrands & XataRecord;

export type States = InferredTypes["states"];
export type StatesRecord = States & XataRecord;

export type Collisions = InferredTypes["collisions"];
export type CollisionsRecord = Collisions & XataRecord;

export type DatabaseSchema = {
  vehicle_brands: VehicleBrandsRecord;
  states: StatesRecord;
  collisions: CollisionsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Badamasi-Aliu-s-workspace-es2754.eu-west-1.xata.sh/db/xata-vehicle-project",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
